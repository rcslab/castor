
import os

Import('env')

rrperf_env = env.Clone()
perf_env = env.Clone()

rrperf_env["CC"] = env["TESTCC"]
rrperf_env["CXX"] = env["TESTCXX"]
rrperf_env["LINK"] = env["TESTLINK"]

perfbench_deps = [ ]

rrperf_env.Append(LIBPATH = ["${BUILDROOT}/../build/lib/Runtime", \
                             "${BUILDROOT}/../build/lib/ThreadRuntime"])
rrperf_env.Append(LIBS = ["thr", "c", "CastorRuntime", "CastorThreadRuntime"])
perf_env.Append(LIBS = ["thr", "c"])

def NoRR(fl):
    return filter(lambda f: not os.path.basename(f.rstr()).startswith("rr_"), fl)

for t in NoRR(Glob('#perf/*.c')):
    d = perf_env.Program(t)
    perfbench_deps.append(d)

for t in Glob('#perf/rr_*.c'):
    d = rrperf_env.Program(t)
    perfbench_deps.append(d)

AlwaysBuild(Alias('perfbench', perfbench_deps, "perf/perfbench.py"))


